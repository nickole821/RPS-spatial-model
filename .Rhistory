df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(title = "Raio Y > O > B, dividindo", x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Probabilidade de\nreprodução") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
theme(text = element_text(size = 24))
df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(title = "Raio Y > O > B, dividindo", x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de vizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
theme(text = element_text(size = 24))
theme(text = element_text(size = 24))
theme(text = element_text(size = 24))
df %>%
df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(title = "Raio Y > O > B, dividindo", x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de vizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_linetype_manual(labels = c("Y>O>B", "O>B=Y")) +
theme(text = element_text(size = 24))
ggsave(filename = "./output/data/stochastic/diferent-neighborhood/basic/figures/figure_all.pdf",
plot = plot_basic, device = pdf, width = 40, height = 25, units = "cm")
df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(title = "Raio Y > O > B, dividindo", x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de vizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_linetype_manual(labels = c("Y>O>B", "O>B=Y")) +
theme(text = element_text(size = 24))
df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(title = "Raio Y > O > B, dividindo", x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de vizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_linetype_manual(values = c(basico = 2, real = 4),
labels = c("Y>O>B", "O>B=Y")) +
theme(text = element_text(size = 24))
df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(title = "Raio Y > O > B, dividindo", x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de vizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_linetype_manual(values = c(basico = 1, real = 4),
labels = c("Y>O>B", "O>B=Y")) +
theme(text = element_text(size = 24))
df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(title = "Raio Y > O > B, dividindo", x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de vizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_linetype_manual(values = c(basico = 1, real = 3),
labels = c("Y>O>B", "O>B=Y")) +
theme(text = element_text(size = 24))
df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(title = "", x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de vizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_linetype_manual(values = c(basico = 1, real = 3),
labels = c("Y>O>B", "O>B=Y")) +
theme(text = element_text(size = 24))
df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de vizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_linetype_manual(values = c(basico = 1, real = 3),
labels = c("Y>O>B", "O>B=Y")) +
theme(text = element_text(size = 24))
plot_raio <- df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de vizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_linetype_manual(values = c(basico = 1, real = 3),
labels = c("Y>O>B", "O>B=Y")) +
theme(text = element_text(size = 24))
df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de\nvizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_linetype_manual(values = c(basico = 1, real = 3),
labels = c("Y>O>B", "O>B=Y")) +
theme(text = element_text(size = 24))
plot_raio <- df %>%
ggplot(aes(x = Generation, y = freq_media, linetype = as.factor(raio), color = strategy)) +
geom_line(size = 1) +
labs(x = "Tempo", y = "Frequência média") +
theme_minimal() +
labs(linetype = "Tipo de\nvizinhança") +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)+strategy) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_linetype_manual(values = c(basico = 1, real = 3),
labels = c("Y>O>B", "O>B=Y")) +
theme(text = element_text(size = 24))
ggsave(filename = "./output/data/stochastic/diferent-neighborhood/figure_radio.pdf",
plot = plot_raio, device = pdf, width = 40, height = 25, units = "cm")
source("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/function-adaptative-neighborhood.R")
source("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/function-adaptative-neighborhood.R")
source("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/function-adaptative-neighborhood.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
dir.create("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/"))
dir.create("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/")
dir.create("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/")
seeds <- readRDS("data/sementes_simulacao.rds")
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_adap(position_matrix, payoff_matrix, num_generations = 100,
prob_reproduce, strategy = TRUE, propO = 0.4)
pasta_resultados <- file.path("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
size <- 100
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_adap(position_matrix, payoff_matrix, num_generations = 100,
prob_reproduce, strategy = TRUE, propO = 0.4)
pasta_resultados <- file.path("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
source("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/function-adaptative-neighborhood.R")
source("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/function-adaptative-neighborhood.R")
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_adap(position_matrix, payoff_matrix, num_generations = 100,
prob_reproduce, strategy = TRUE, propO = 0.4,
divide = FALSE)
pasta_resultados <- file.path("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
prob_reproduce <- 0
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_adap(position_matrix, payoff_matrix, num_generations = 100,
prob_reproduce, strategy = TRUE, propO = 0.4,
divide = FALSE)
pasta_resultados <- file.path("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
View(result)
result$frequencies
# Matriz pequena de exemplo (10x10), com várias estratégias
set.seed(123)
position_matrix <- matrix(sample(c("O", "B", "Y"), 100, replace = TRUE), nrow = 10)
# Visualiza ela se quiser
print(position_matrix)
# Suponha que (5, 5) seja um agente "Y"
position_matrix[5, 5] <- "Y"
# Chamar a função e ver o número de vizinhos
neighbors <- get_neighbors(5, 5, position_matrix, strategy = TRUE)
get_neighbors <- function(i, j, position_matrix, strategy = FALSE, propO) {
size <- nrow(position_matrix)
neighbors <- c()
if (strategy == FALSE) {
i_seq <- ((i - 1):(i + 1) - 1) %% size + 1
j_seq <- ((j - 1):(j + 1) - 1) %% size + 1
neighbors_matrix <- position_matrix[i_seq, j_seq]
neighbors <- as.vector(neighbors_matrix)
neighbors <- neighbors[-5]
} else {
current_strategy <- position_matrix[i, j]
if (current_strategy == "B") {
# Vizinhança pequena (5x5 - 24 vizinhos)
i_seq <- ((i - 2):(i + 2) - 1) %% size + 1
j_seq <- ((j - 2):(j + 2) - 1) %% size + 1
neighbors_matrix <- position_matrix[i_seq, j_seq]
neighbors <- as.vector(neighbors_matrix)
neighbors <- neighbors[-13]  # remove o próprio agente
} else if (current_strategy == "O") {
# Vizinhança grande (7x7 - 48 vizinhos)
i_seq <- ((i - 3):(i + 3) - 1) %% size + 1
j_seq <- ((j - 3):(j + 3) - 1) %% size + 1
neighbors_matrix <- position_matrix[i_seq, j_seq]
neighbors <- as.vector(neighbors_matrix)
neighbors <- neighbors[-25]
} else if (current_strategy == "Y") {
# Primeiro, usar a vizinhança pequena pra inspecionar
i_seq_small <- ((i - 2):(i + 2) - 1) %% size + 1
j_seq_small <- ((j - 2):(j + 2) - 1) %% size + 1
small_matrix <- position_matrix[i_seq_small, j_seq_small]
small_neighbors <- as.vector(small_matrix)[-13]  # remove o centro
prop_O <- sum(small_neighbors == "O") / length(small_neighbors)
if (prop_O > propO) {
# Adota vizinhança de B (pequena)
neighbors <- small_neighbors
} else {
# Adota vizinhança de O (grande)
i_seq_large <- ((i - 3):(i + 3) - 1) %% size + 1
j_seq_large <- ((j - 3):(j + 3) - 1) %% size + 1
large_matrix <- position_matrix[i_seq_large, j_seq_large]
neighbors <- as.vector(large_matrix)
neighbors <- neighbors[-25]
}
} else {
# Fallback: padrão 3x3
i_seq <- ((i - 1):(i + 1) - 1) %% size + 1
j_seq <- ((j - 1):(j + 1) - 1) %% size + 1
neighbors_matrix <- position_matrix[i_seq, j_seq]
neighbors <- as.vector(neighbors_matrix)
neighbors <- neighbors[-5]
}
}
return(neighbors)
}
# Chamar a função e ver o número de vizinhos
neighbors <- get_neighbors(5, 5, position_matrix, strategy = TRUE)
# Chamar a função e ver o número de vizinhos
neighbors <- get_neighbors(5, 5, position_matrix, strategy = TRUE, propO = 0.4)
length(neighbors)  # Deve ser 24 ou 48 dependendo da frequência de "O" ao redor
position_matrix[4:6, 4:6] <- "O"
position_matrix[5, 5] <- "Y"
# Visualiza ela se quiser
print(position_matrix)
neighbors <- get_neighbors(5, 5, position_matrix, strategy = TRUE, propO = 0.4)
length(neighbors)  # Deve ser 24
neighbors <- get_neighbors(5, 5, position_matrix, strategy = TRUE, propO = 0.4)
length(neighbors)  # Deve ser 48
position_matrix[4:6, 4:6] <- "B"
position_matrix[5, 5] <- "Y"
neighbors <- get_neighbors(5, 5, position_matrix, strategy = TRUE, propO = 0.4)
length(neighbors)  # Deve ser 48
source("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/function-adaptative-neighborhood.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 100
prob_reproduce <- 0
size <- 100
dir.create("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_adap(position_matrix, payoff_matrix, num_generations = 200,
prob_reproduce, strategy = TRUE, propO = 0.4,
divide = FALSE)
pasta_resultados <- file.path("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
source("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/function-adaptative-neighborhood.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
prob_reproduce <- 0
size <- 100
dir.create("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_adap(position_matrix, payoff_matrix, num_generations = 200,
prob_reproduce, strategy = TRUE, propO = 0.5,
divide = FALSE)
pasta_resultados <- file.path("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
cat("Acabou! Ufa! :)\n")
end_time <- Sys.time()
end_time - start_time
result$frequencies
source("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/function-adaptative-neighborhood.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
prob_reproduce <- 0
size <- 100
dir.create("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_adap(position_matrix, payoff_matrix, num_generations = 200,
prob_reproduce, strategy = TRUE, propO = 0.5,
divide = FALSE)
pasta_resultados <- file.path("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
source("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/function-adaptative-neighborhood.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 100
prob_reproduce <- 0
size <- 100
dir.create("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_adap(position_matrix, payoff_matrix, num_generations = 200,
prob_reproduce, strategy = TRUE, propO = 0.5,
divide = FALSE)
pasta_resultados <- file.path("output/data/stochastic/diferent-neighborhood/adaptative-neighborhood/p0/",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
p0_basicneighborhood <- read.csv("./output/data/stochastic/regular-neighborhood/prob_reproduce/freq.csv",
header = T)
df <- read.csv("./output/data/stochastic/regular-neighborhood/prob_reproduce/freq.csv",
header = T)
df <- read.csv("./output/data/stochastic/regular-neighborhood/prob_reproduce/mean/freq_mean_sd.csv",
header = T)
str(df)
df %>%
ggplot(aes(x = Generation, y = freq_media, color = strategy)) +
geom_line(size = 1) +
labs(x = "Tempo", y = "Frequência média") +
theme_minimal() +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
theme(text = element_text(size = 24))
plot <- df %>%
ggplot(aes(x = Generation, y = freq_media, color = strategy)) +
geom_line(size = 1) +
labs(x = "Tempo", y = "Frequência média") +
theme_minimal() +
scale_y_continuous(limits = c(0,1)) +
facet_wrap(~as.factor(prob)) +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
theme(text = element_text(size = 24))
ggsave(filename = "./output/data/stochastic/regular-neighborhood/prob_reproduce/figures/plot_all.pdf",
plot = plot, device = pdf, width = 40, height = 25, units = "cm")
