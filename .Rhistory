}
}
return(new_matrix)
}
# principal loop
for (generation in 1:num_generations) {
# step 1: calculate fitness matrix
fitness_matrix <- get_fitness_matrix(position_matrix)
# step 2: select agents to reproduce and die
intermediate_matrix <- going_to_die(position_matrix, prob_death)
# step 3: ocupying the empty spaces with fittest neighbors
new_matrix <- get_new_matrix(position_matrix, intermediate_matrix, fitness_matrix)
# save matrix
all_matrices[[generation + 1]] <- new_matrix
# save frequency
frequencies <- rbind(frequencies, data.frame(Generation = generation,
O = sum(new_matrix == "O") / (size^2),
Y = sum(new_matrix == "Y") / (size^2),
B = sum(new_matrix == "B") / (size^2)))
# new_matrix become the initial position matrix for the next generation
position_matrix <- new_matrix
}
return(list(matrices = all_matrices, frequencies = frequencies))
}
source("./r-scripts/stochastic-model/functions.R")
source("./r-scripts/stochastic-model/functions.R")
strategies <- c("O", "Y", "B") # agents in the game
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix # payoff matrix of the game
size <- 10
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size) # random initial position
position_matrix
prob_death <- 0.5  # probability of death (goes from 0 to 1) equal to all players
View(simulation)
simualation(position_matrix, payoff_matrix, num_generations = 100, prob_death = 0.5)
simulation(position_matrix, payoff_matrix, num_generations = 100, prob_death = 0.5)
a <- simulation(position_matrix, payoff_matrix, num_generations = 100, prob_death = 0.5)
View(a)
strategies <- c("O", "Y", "B") # agents in the game
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix # payoff matrix of the game
size <- 100
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size) # random initial position
position_matrix
prob_death <- 0.5  # probability of death (goes from 0 to 1) equal to all players
a <- simulation(position_matrix, payoff_matrix, num_generations = 100, prob_death = 0.5)
View(a)
a$frequencies
View(a)
strategies <- c("O", "Y", "B") # agents in the game
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix # payoff matrix of the game
size <- 100
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size) # random initial position
position_matrix
prob_death <- 0.5  # probability of death (goes from 0 to 1) equal to all players
resultados <- simulation(position_matrix, payoff_matrix, num_generations = 100, prob_death = 0.5)
source("./r-scripts/stochastic-model/functions.R")
resultados <- simulation(position_matrix, payoff_matrix, num_generations = 100, prob_death = 0.5)
generate_image <- function(matrix_data, generation) {
matrix_df <- matrix2longdf(matrix_data)
p <- ggplot(matrix_df, aes(x = column, y = row, fill = value)) +
geom_tile() +
scale_fill_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_y_reverse() +
labs(x = element_blank(), y = element_blank()) +
theme_classic() +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
labs(title = paste("Geração:", generation)) +
theme(text = element_text(size = 20))
img_path <- paste0("./r-scripts/stochastic-model/teste", generation, ".png")
ggsave(img_path, plot = p, width = 7, height = 5, dpi = 300)
return(img_path)
}
image_paths <- c()
for (i in 1:length(resultados$matrices)) {
img_path <- generate_image(resultados$matrices[[i]], i - 1)
image_paths <- c(image_paths, img_path)
}
img_list <- lapply(image_paths, image_read)
gif <- image_animate(image_join(img_list), fps = 5) # Criar o GIF usando magick
image_write(gif, "./r-scripts/stochastic-model/teste.gif") # Salvar o GIF
file.remove(image_paths) # Limpar arquivos temporários
browseURL("./r-scripts/stochastic-model/teste.gif.gif")
source("./r-scripts/stochastic-model/functions.R")
strategies <- c("O", "Y", "B") # agents in the game
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix # payoff matrix of the game
size <- 100
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size) # random initial position
position_matrix
prob_death <- 0.5  # probability of death (goes from 0 to 1) equal to all players
resultados <- simulation(position_matrix, payoff_matrix, num_generations = 100, prob_death = 0.5)
generate_image <- function(matrix_data, generation, output_dir) {
# Converter matriz para formato longo (data.frame)
matrix_df <- matrix2longdf(matrix_data)
# Criar o gráfico
p <- ggplot(matrix_df, aes(x = column, y = row, fill = value)) +
geom_tile() +
scale_fill_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_y_reverse() +
labs(title = paste("Geração:", generation), x = NULL, y = NULL) +
theme_classic() +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
text = element_text(size = 20))
# Definir o caminho do arquivo
img_path <- file.path(output_dir, paste0("frame_", generation, ".png"))
# Salvar imagem
ggsave(img_path, plot = p, width = 7, height = 5, dpi = 300)
return(img_path)
}
# Criar diretório para salvar imagens temporárias
output_dir <- "./output/gifs/temporary"
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
# Gerar imagens para todas as matrizes
image_paths <- map_chr(seq_along(resultados$matrices),
~ generate_image(resultados$matrices[[.x]], .x - 1, output_dir))
# Criar GIF
gif <- image_animate(image_join(lapply(image_paths, image_read)), fps = 5)
# Salvar o GIF final
gif_path <- "./output/gifs/stochastic.gif"
image_write(gif, gif_path)
# Remover arquivos temporários
unlink(output_dir, recursive = TRUE)
# Abrir o GIF no navegador
browseURL(gif_path)
df_freq <- resultados$frequencies
df_freq <- df_freq %>%
pivot_longer(cols = 2:4, names_to = "strategy", values_to = "freq")
ggplot(df_freq, aes(x = geracao, y = freq, color = as.factor(strategy))) +
geom_line(size = 1) +
theme_minimal() +
labs(x = "Gerações", y = "Frequência") +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_y_continuous(limits = c(0, 1))
ggplot(df_freq, aes(x = Generation, y = freq, color = as.factor(strategy))) +
geom_line(size = 1) +
theme_minimal() +
labs(x = "Gerações", y = "Frequência") +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_y_continuous(limits = c(0, 1))
source("./r-scripts/stochastic-model/functions.R")
strategies <- c("O", "Y", "B") # agents in the game
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix # payoff matrix of the game
size <- 100
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE,
prob = c(0.5, 0.25, 0.25)),
nrow = size, ncol = size) # random initial position
position_matrix
prob_death <- 0.5  # probability of death (goes from 0 to 1) equal to all players
resultados <- simulation(position_matrix, payoff_matrix, num_generations = 100, prob_death = 0.5)
generate_image <- function(matrix_data, generation, output_dir) {
# Converter matriz para formato longo (data.frame)
matrix_df <- matrix2longdf(matrix_data)
# Criar o gráfico
p <- ggplot(matrix_df, aes(x = column, y = row, fill = value)) +
geom_tile() +
scale_fill_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_y_reverse() +
labs(title = paste("Geração:", generation), x = NULL, y = NULL) +
theme_classic() +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
text = element_text(size = 20))
# Definir o caminho do arquivo
img_path <- file.path(output_dir, paste0("frame_", generation, ".png"))
# Salvar imagem
ggsave(img_path, plot = p, width = 7, height = 5, dpi = 300)
return(img_path)
}
# Criar diretório para salvar imagens temporárias
output_dir <- "./output/gifs/temporary"
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
# Gerar imagens para todas as matrizes
image_paths <- map_chr(seq_along(resultados$matrices),
~ generate_image(resultados$matrices[[.x]], .x - 1, output_dir))
# Criar GIF
gif <- image_animate(image_join(lapply(image_paths, image_read)), fps = 5)
# Salvar o GIF final
gif_path <- "./output/gifs/stochastic-freq.gif"
image_write(gif, gif_path)
# Remover arquivos temporários
unlink(output_dir, recursive = TRUE)
# Abrir o GIF no navegador
browseURL(gif_path)
df_freq <- resultados$frequencies
df_freq <- df_freq %>%
pivot_longer(cols = 2:4, names_to = "strategy", values_to = "freq")
ggplot(df_freq, aes(x = Generation, y = freq, color = as.factor(strategy))) +
geom_line(size = 1) +
theme_minimal() +
labs(x = "Gerações", y = "Frequência") +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_y_continuous(limits = c(0, 1))
source("./r-scripts/stochastic-model/functions.R")
strategies <- c("O", "Y", "B") # agents in the game
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix # payoff matrix of the game
size <- 100
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE,
prob = c(0.5, 0.25, 0.25)),
nrow = size, ncol = size) # random initial position
position_matrix
prob_death <- 0.5  # probability of death (goes from 0 to 1) equal to all players
resultados <- simulation(position_matrix, payoff_matrix, num_generations = 100, prob_death = 0.5)
generate_image <- function(matrix_data, generation, output_dir) {
# Converter matriz para formato longo (data.frame)
matrix_df <- matrix2longdf(matrix_data)
# Criar o gráfico
p <- ggplot(matrix_df, aes(x = column, y = row, fill = value)) +
geom_tile() +
scale_fill_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_y_reverse() +
labs(title = paste("Geração:", generation), x = NULL, y = NULL) +
theme_classic() +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
text = element_text(size = 20))
# Definir o caminho do arquivo
img_path <- file.path(output_dir, paste0("frame_", generation, ".png"))
# Salvar imagem
ggsave(img_path, plot = p, width = 7, height = 5, dpi = 300)
return(img_path)
}
# Criar diretório para salvar imagens temporárias
output_dir <- "./output/gifs/temporary"
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
# Gerar imagens para todas as matrizes
image_paths <- map_chr(seq_along(resultados$matrices),
~ generate_image(resultados$matrices[[.x]], .x - 1, output_dir))
library(tidyverse)
library(ggpubr)
library(magick)
generate_image <- function(matrix_data, generation, output_dir) {
# Converter matriz para formato longo (data.frame)
matrix_df <- matrix2longdf(matrix_data)
# Criar o gráfico
p <- ggplot(matrix_df, aes(x = column, y = row, fill = value)) +
geom_tile() +
scale_fill_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_y_reverse() +
labs(title = paste("Geração:", generation), x = NULL, y = NULL) +
theme_classic() +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
text = element_text(size = 20))
# Definir o caminho do arquivo
img_path <- file.path(output_dir, paste0("frame_", generation, ".png"))
# Salvar imagem
ggsave(img_path, plot = p, width = 7, height = 5, dpi = 300)
return(img_path)
}
# Criar diretório para salvar imagens temporárias
output_dir <- "./output/gifs/temporary"
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
# Gerar imagens para todas as matrizes
image_paths <- map_chr(seq_along(resultados$matrices),
~ generate_image(resultados$matrices[[.x]], .x - 1, output_dir))
# Criar GIF
gif <- image_animate(image_join(lapply(image_paths, image_read)), fps = 5)
library(ribiosUtils)
generate_image <- function(matrix_data, generation, output_dir) {
# Converter matriz para formato longo (data.frame)
matrix_df <- matrix2longdf(matrix_data)
# Criar o gráfico
p <- ggplot(matrix_df, aes(x = column, y = row, fill = value)) +
geom_tile() +
scale_fill_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_y_reverse() +
labs(title = paste("Geração:", generation), x = NULL, y = NULL) +
theme_classic() +
theme(axis.text = element_blank(), axis.ticks = element_blank(),
text = element_text(size = 20))
# Definir o caminho do arquivo
img_path <- file.path(output_dir, paste0("frame_", generation, ".png"))
# Salvar imagem
ggsave(img_path, plot = p, width = 7, height = 5, dpi = 300)
return(img_path)
}
# Criar diretório para salvar imagens temporárias
output_dir <- "./output/gifs/temporary"
dir.create(output_dir, showWarnings = FALSE, recursive = TRUE)
# Gerar imagens para todas as matrizes
image_paths <- map_chr(seq_along(resultados$matrices),
~ generate_image(resultados$matrices[[.x]], .x - 1, output_dir))
# Criar GIF
gif <- image_animate(image_join(lapply(image_paths, image_read)), fps = 5)
# Salvar o GIF final
gif_path <- "./output/gifs/stochastic-freq.gif"
image_write(gif, gif_path)
# Remover arquivos temporários
unlink(output_dir, recursive = TRUE)
# Abrir o GIF no navegador
browseURL(gif_path)
df_freq <- resultados$frequencies
df_freq <- df_freq %>%
pivot_longer(cols = 2:4, names_to = "strategy", values_to = "freq")
ggplot(df_freq, aes(x = Generation, y = freq, color = as.factor(strategy))) +
geom_line(size = 1) +
theme_minimal() +
labs(x = "Gerações", y = "Frequência") +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
scale_y_continuous(limits = c(0, 1))
# Instalar pacotes necessários (se ainda não tiver)
install.packages(c("future", "furrr", "readr"))
# Instalar pacotes necessários (se ainda não tiver)
install.packages(c("future", "furrr", "readr"))
library(readr)
# Criar pasta principal para os resultados
dir.create("./output/data/stochastic/prob-death/0-5", showWarnings = FALSE)
# Criar pasta principal para os resultados
dir.create("./output/data/stochastic/prob_death/0-5", showWarnings = FALSE)
# Criar pasta principal para os resultados
dir.create("./output/data/stochastic/prob_death/0-5", showWarnings = FALSE)
# Criar pasta principal para os resultados
dir.create("./output/data/stochastic/prob_death/0-5")
# Criar pasta principal para os resultados
dir.create("./output/data/stochastic/prob_death/0-5")
source("./r-scripts/stochastic-model/functions.R")
View(simulation)
source("./r-scripts/stochastic-model/functions.R")
dir.create("./output/data/stochastic/prob_death/0-5")
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 100
prob_death <- 0.5
size <- 100
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation(position_matrix, payoff_matrix, num_generations = 100,
prob_death)
pasta_resultados <- file.path(".output/data/stochastic/0-5/", paste0("sim_", i))
dir.create(pasta_resultados, showWarnings = FALSE, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(1:length(result$matrices), function(i) {
data.frame(Generation = i - 1, as.data.frame(resultado$matrices[[i]]))
}))
write_csv(matrizes, matriz_path)
write_csv(result$frequencies, freq_path)
}
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation(position_matrix, payoff_matrix, num_generations = 100,
prob_death)
pasta_resultados <- file.path(".output/data/stochastic/0-5/", paste0("sim_", i))
dir.create(pasta_resultados, showWarnings = FALSE, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(1:length(result$matrices), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write_csv(matrizes, matriz_path)
write_csv(result$frequencies, freq_path)
}
View(matrizes)
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation(position_matrix, payoff_matrix, num_generations = 100,
prob_death)
pasta_resultados <- file.path(".output/data/stochastic/0-5/", paste0("sim_", i))
dir.create(pasta_resultados, showWarnings = FALSE, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(1:length(result$matrices), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
n_sim <- 2
prob_death <- 0.5
size <- 100
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation(position_matrix, payoff_matrix, num_generations = 100,
prob_death)
pasta_resultados <- file.path(".output/data/stochastic/0-5/", paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(1:length(result$matrices), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
source("./r-scripts/stochastic-model/functions.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 2
prob_death <- 0.5
size <- 100
dir.create("./output/data/stochastic/prob_death/", prob_death)
prob_death <- 0.6
size <- 100
dir.create("./output/data/stochastic/prob_death/", prob_death)
prob_death <- 0.5
size <- 100
dir.create("./output/data/stochastic/prob_death/0-5")
n_sim <- 100
prob_death <- 0.5
size <- 100
dir.create("./output/data/stochastic/prob_death/0-5")
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation(position_matrix, payoff_matrix, num_generations = 100,
prob_death)
pasta_resultados <- file.path("./output/data/stochastic/0-5/", paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(1:length(result$matrices), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation(position_matrix, payoff_matrix, num_generations = 100,
prob_death)
pasta_resultados <- file.path("./output/data/stochastic/prob_death/0-5/",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(1:length(result$matrices), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
# Gerar e salvar sementes antes da primeira execução
set.seed(123)  # Semente fixa para garantir que o vetor de sementes seja sempre o mesmo
seeds <- sample(1:1e6, n_sim, replace = FALSE)
saveRDS(seeds, file = "./data/sementes_simulacao.rds")
