strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
size <- 100
dir.create("./output/data/stochastic/diferent-neighborhood/prob_death")
seeds <- readRDS("data/sementes_simulacao.rds")
View(simulation_prob_death)
source("./r-scripts/stochastic-model/function-prob_death.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
size <- 100
dir.create("./output/data/stochastic/diferent-neighborhood/prob_death")
seeds <- readRDS("data/sementes_simulacao.rds")
source("./r-scripts/stochastic-model/function-prob_death.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
size <- 100
dir.create("./output/data/stochastic/diferent-neighborhood/prob_death")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_prob_death(position_matrix, payoff_matrix, num_generations = 200,
strategy = TRUE, divide = FALSE)
pasta_resultados <- file.path("./output/data/stochastic/diferent-neighborhood/prob_death",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
cat("Acabou! Ufa! :)\n")
end_time <- Sys.time()
end_time - start_time
result$frequencies
### plotting initial_freq ###
library(tidyverse)
library(purrr)
df_freq <- result$frequencies
str(df_freq)
df_freq <- df_freq %>%
pivot_longer(cols = 2:4, names_to = "strategy", values_to = "freq")
str(df_freq)
df_media <- df_freq %>%
group_by(Generation, strategy) %>%
summarise(freq_media = mean(freq), .groups = "drop")
df_media
# Criar o gráfico com todas as simulações, a média destacada e os valores no final
ggplot(df_freq, aes(x = Generation, y = freq, color = as.factor(strategy))) +
geom_line(size = 1, alpha = 1) +
geom_line(data = df_media, aes(x = Generation, y = freq_media,
color = as.factor(strategy),
group = strategy),
size = 1.5, linetype = "solid") +
theme_minimal() +
labs(x = "Gerações", y = "Frequência", title = "Prob_reproduce_0") +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
theme(text = element_text(size = 24)) +
scale_y_continuous(lim = c(0,1))
### plotting initial_freq ###
library(tidyverse)
library(purrr)
df_freq <- result$frequencies
str(df_freq)
df_freq <- df_freq %>%
pivot_longer(cols = 2:4, names_to = "strategy", values_to = "freq")
str(df_freq)
df_media <- df_freq %>%
group_by(Generation, strategy) %>%
summarise(freq_media = mean(freq), .groups = "drop")
df_media
# Criar o gráfico com todas as simulações, a média destacada e os valores no final
ggplot(df_freq, aes(x = Generation, y = freq, color = as.factor(strategy))) +
geom_line(size = 1, alpha = 1) +
geom_line(data = df_media, aes(x = Generation, y = freq_media,
color = as.factor(strategy),
group = strategy),
size = 1.5, linetype = "solid") +
theme_minimal() +
labs(x = "Gerações", y = "Frequência", title = "death") +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
theme(text = element_text(size = 24)) +
scale_y_continuous(lim = c(0,1))
source("./r-scripts/stochastic-model/function-prob_death.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
size <- 100
dir.create("./output/data/stochastic/diferent-neighborhood/prob_death")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_prob_death(position_matrix, payoff_matrix, num_generations = 200,
strategy = TRUE, divide = TRUE)
pasta_resultados <- file.path("./output/data/stochastic/diferent-neighborhood/prob_death",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
cat("Acabou! Ufa! :)\n")
end_time <- Sys.time()
end_time - start_time
result$frequencies
### plotting initial_freq ###
library(tidyverse)
library(purrr)
df_freq <- result$frequencies
str(df_freq)
df_freq <- df_freq %>%
pivot_longer(cols = 2:4, names_to = "strategy", values_to = "freq")
str(df_freq)
df_media <- df_freq %>%
group_by(Generation, strategy) %>%
summarise(freq_media = mean(freq), .groups = "drop")
df_media
# Criar o gráfico com todas as simulações, a média destacada e os valores no final
ggplot(df_freq, aes(x = Generation, y = freq, color = as.factor(strategy))) +
geom_line(size = 1, alpha = 1) +
geom_line(data = df_media, aes(x = Generation, y = freq_media,
color = as.factor(strategy),
group = strategy),
size = 1.5, linetype = "solid") +
theme_minimal() +
labs(x = "Gerações", y = "Frequência", title = "death") +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
theme(text = element_text(size = 24)) +
scale_y_continuous(lim = c(0,1))
p <- seq(0, 100, by = 0.5)  # Aumentamos o domínio também
k <- 0.1  # fator de suavização (menor = mais suave)
d <- 1 / (1 + exp(k * p))
d_norm <- 2 * d  # normalizando para variar entre 1 e 0
plot(p, d_norm, type = "l", col = "darkgreen", lwd = 2,
xlab = "p", ylab = "d_normalizado(p)",
main = bquote("Função suavizada com " ~ k == .(k)))
abline(h = c(0, 1), lty = 2, col = "gray")
p <- seq(0, 100, by = 0.5)  # Aumentamos o domínio também
k <- 0.05  # fator de suavização (menor = mais suave)
d <- 1 / (1 + exp(k * p))
d_norm <- 2 * d  # normalizando para variar entre 1 e 0
plot(p, d_norm, type = "l", col = "darkgreen", lwd = 2,
xlab = "p", ylab = "d_normalizado(p)",
main = bquote("Função suavizada com " ~ k == .(k)))
abline(h = c(0, 1), lty = 2, col = "gray")
p <- seq(0, 100, by = 0.5)  # Aumentamos o domínio também
k <- 0.01  # fator de suavização (menor = mais suave)
d <- 1 / (1 + exp(k * p))
d_norm <- 2 * d  # normalizando para variar entre 1 e 0
plot(p, d_norm, type = "l", col = "darkgreen", lwd = 2,
xlab = "p", ylab = "d_normalizado(p)",
main = bquote("Função suavizada com " ~ k == .(k)))
abline(h = c(0, 1), lty = 2, col = "gray")
p <- seq(0, 100, by = 0.5)  # Aumentamos o domínio também
k <- 0.05  # fator de suavização (menor = mais suave)
d <- 1 / (1 + exp(k * p))
d_norm <- 2 * d  # normalizando para variar entre 1 e 0
plot(p, d_norm, type = "l", col = "darkgreen", lwd = 2,
xlab = "p", ylab = "d_normalizado(p)",
main = bquote("Função suavizada com " ~ k == .(k)))
abline(h = c(0, 1), lty = 2, col = "gray")
source("./r-scripts/stochastic-model/function-prob_death.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
size <- 100
dir.create("./output/data/stochastic/diferent-neighborhood/prob_death")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_prob_death(position_matrix, payoff_matrix, num_generations = 200,
strategy = TRUE, divide = TRUE, k = 0.05)
pasta_resultados <- file.path("./output/data/stochastic/diferent-neighborhood/prob_death",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
source("./r-scripts/stochastic-model/function-prob_death.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
size <- 100
dir.create("./output/data/stochastic/diferent-neighborhood/prob_death")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_prob_death(position_matrix, payoff_matrix, num_generations = 200,
strategy = TRUE, divide = TRUE, k = 0.05)
pasta_resultados <- file.path("./output/data/stochastic/diferent-neighborhood/prob_death",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
cat("Acabou! Ufa! :)\n")
end_time <- Sys.time()
end_time - start_time
result$frequencies
### plotting initial_freq ###
library(tidyverse)
library(purrr)
df_freq <- result$frequencies
str(df_freq)
df_freq <- df_freq %>%
pivot_longer(cols = 2:4, names_to = "strategy", values_to = "freq")
str(df_freq)
df_media <- df_freq %>%
group_by(Generation, strategy) %>%
summarise(freq_media = mean(freq), .groups = "drop")
df_media
# Criar o gráfico com todas as simulações, a média destacada e os valores no final
ggplot(df_freq, aes(x = Generation, y = freq, color = as.factor(strategy))) +
geom_line(size = 1, alpha = 1) +
geom_line(data = df_media, aes(x = Generation, y = freq_media,
color = as.factor(strategy),
group = strategy),
size = 1.5, linetype = "solid") +
theme_minimal() +
labs(x = "Gerações", y = "Frequência", title = "death") +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
theme(text = element_text(size = 24)) +
scale_y_continuous(lim = c(0,1))
source("./r-scripts/stochastic-model/function-prob_death.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
size <- 100
dir.create("./output/data/stochastic/diferent-neighborhood/prob_death")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_prob_death(position_matrix, payoff_matrix, num_generations = 200,
strategy = TRUE, divide = FALSE, k = 0.05)
pasta_resultados <- file.path("./output/data/stochastic/diferent-neighborhood/prob_death",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
cat("Acabou! Ufa! :)\n")
end_time <- Sys.time()
end_time - start_time
result$frequencies
### plotting initial_freq ###
library(tidyverse)
library(purrr)
df_freq <- result$frequencies
str(df_freq)
df_freq <- df_freq %>%
pivot_longer(cols = 2:4, names_to = "strategy", values_to = "freq")
str(df_freq)
df_media <- df_freq %>%
group_by(Generation, strategy) %>%
summarise(freq_media = mean(freq), .groups = "drop")
df_media
# Criar o gráfico com todas as simulações, a média destacada e os valores no final
ggplot(df_freq, aes(x = Generation, y = freq, color = as.factor(strategy))) +
geom_line(size = 1, alpha = 1) +
geom_line(data = df_media, aes(x = Generation, y = freq_media,
color = as.factor(strategy),
group = strategy),
size = 1.5, linetype = "solid") +
theme_minimal() +
labs(x = "Gerações", y = "Frequência", title = "death") +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
theme(text = element_text(size = 24)) +
scale_y_continuous(lim = c(0,1))
p <- seq(0, 100, by = 0.5)  # Aumentamos o domínio também
k <- 0.05  # fator de suavização (menor = mais suave)
d <- 1 / (1 + exp(k * p))
d_norm <- 2 * d  # normalizando para variar entre 1 e 0
plot(p, d_norm, type = "l", col = "darkgreen", lwd = 2,
xlab = "p", ylab = "d_normalizado(p)",
main = bquote("Função suavizada com " ~ k == .(k)))
abline(h = c(0, 1), lty = 2, col = "gray")
p <- seq(0, 100, by = 0.5)  # Aumentamos o domínio também
k <- 0.05  # fator de suavização (menor = mais suave)
d <- 1 / (1 + exp(k * p))
d_norm <- 2 * d  # normalizando para variar entre 1 e 0
plot(p, d_norm, type = "l", col = "darkgreen", lwd = 2,
xlab = "p", ylab = "d_normalizado(p)",
main = bquote(~ k == .(k)))
abline(h = c(0, 1), lty = 2, col = "gray")
source("./r-scripts/stochastic-model/function-prob_death.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
size <- 100
dir.create("./output/data/stochastic/diferent-neighborhood/prob_death")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_prob_death(position_matrix, payoff_matrix, num_generations = 100,
strategy = TRUE, divide = FALSE, k = 0.05)
pasta_resultados <- file.path("./output/data/stochastic/diferent-neighborhood/prob_death",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
cat("Acabou! Ufa! :)\n")
end_time <- Sys.time()
end_time - start_time
result$frequencies
### plotting initial_freq ###
library(tidyverse)
library(purrr)
df_freq <- result$frequencies
str(df_freq)
df_freq <- df_freq %>%
pivot_longer(cols = 2:4, names_to = "strategy", values_to = "freq")
str(df_freq)
df_media <- df_freq %>%
group_by(Generation, strategy) %>%
summarise(freq_media = mean(freq), .groups = "drop")
df_media
# Criar o gráfico com todas as simulações, a média destacada e os valores no final
ggplot(df_freq, aes(x = Generation, y = freq, color = as.factor(strategy))) +
geom_line(size = 1, alpha = 1) +
geom_line(data = df_media, aes(x = Generation, y = freq_media,
color = as.factor(strategy),
group = strategy),
size = 1.5, linetype = "solid") +
theme_minimal() +
labs(x = "Gerações", y = "Frequência", title = "death") +
scale_color_manual(values = c("O" = "tomato2", "Y" = "gold2", "B" = "blue"),
name = "Estratégia", labels = c("Azul", "Laranja", "Amarelo")) +
theme(text = element_text(size = 24)) +
scale_y_continuous(lim = c(0,1))
source("./r-scripts/stochastic-model/function-prob_death.R")
library(readr)
strategies <- c("O", "Y", "B")
a <- 2
b <- 1/a
payoff_matrix <- matrix(c(1, b, a,
a, 1, b,
b, a, 1), byrow = T, nrow = 3)
colnames(payoff_matrix) <- strategies
rownames(payoff_matrix) <- strategies
payoff_matrix
n_sim <- 1
size <- 100
dir.create("./output/data/stochastic/diferent-neighborhood/prob_death")
seeds <- readRDS("data/sementes_simulacao.rds")
start_time <- Sys.time()
for (i in 1:n_sim) {
cat("Rodando simulação", i, "\n")
set.seed(seeds[i])
position_matrix <- matrix(sample(strategies, size^2, replace = TRUE),
nrow = size, ncol = size)
result <- simulation_prob_death(position_matrix, payoff_matrix, num_generations = 100,
strategy = TRUE, divide = FALSE, k = 0.03)
pasta_resultados <- file.path("./output/data/stochastic/diferent-neighborhood/prob_death",
paste0("sim_", i))
dir.create(pasta_resultados, recursive = TRUE)
matriz_path <- file.path(pasta_resultados, paste0("matrix.csv"))
freq_path <- file.path(pasta_resultados, paste0("freq.csv"))
matrizes <- do.call(rbind, lapply(seq(1, length(result$matrices), by = 20), function(i) {
data.frame(Generation = i - 1, as.data.frame(result$matrices[[i]]))
}))
write.csv(matrizes, matriz_path)
write.csv(result$frequencies, freq_path)
}
cat("Acabou! Ufa! :)\n")
end_time <- Sys.time()
end_time - start_time
result$frequencies
p <- seq(0, 100, by = 0.5)  # Aumentamos o domínio também
k <- 0.05  # fator de suavização (menor = mais suave)
d <- 1 / (1 + exp(k * p))
d_norm <- 2 * d  # normalizando para variar entre 1 e 0
plot(p, d_norm, type = "l", col = "darkgreen", lwd = 2,
xlab = "p", ylab = "d_normalizado(p)",
main = bquote(~ k == .(k)))
abline(h = c(0, 1), lty = 2, col = "gray")
library()
df_freq <- read.csv("./output/data/stochastic/neighbors/real-r/p025.csv",
header = T)
df_freq <- read.csv("./output/data/stochastic/diferent-neighbors/real-r/p025.csv",
header = T)
df_freq <- read.csv("./output/data/stochastic/diferent_neighbors/real-r/p025.csv",
header = T)
df_freq <- read.csv("./output/data/stochastic/diferent-neighborhood/real-r/p025.csv",
header = T)
df_freq <- read.csv("./output/data/stochastic/diferent-neighborhood/real-r/p025.csv",
header = T)
str(df_freq)
df_freq_cont <- read.csv("./output/data/stochastic/diferent-neighborhood/real-r/p025-final.csv",
header = T)
range(df_freq$sim)
